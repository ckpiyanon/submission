/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author win11905
 * I reduce to k = X * A[1] + Y;
 * for each mod collect most least that can change to
 */

#include <bits/stdc++.h>
#define all(x) (x).begin(), (x).end()
#define long long long
#define pii pair<int, int>
#define x first
#define y second
using namespace std;
const long MOD = 1e9+7, LINF = 1e18 + 1e16;
const int INF = 1e9+1;
const double EPS = 1e-10;
const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};

const int N = 1e4+5;

class sum {
private:
	int n, m;
	int A[N];
	int d[N];
public:
	void solve(istream& cin, ostream& cout) {
		cin >> n;
		for(int i = 1; i <= n; ++i) cin >> A[i];
		fill_n(d, N, (int)2e9);
		priority_queue<pii, vector<pii>, greater<pii> > Q;
		Q.emplace(d[0] = 0, 0);
		while(!Q.empty()) {
			pii now = Q.top(); Q.pop();
			int u = now.y;
			for(int i = 2; i <= n; ++i) {
				int v = (u + A[i]) % A[1], w = A[i];
				if(d[v] > d[u] + w) Q.emplace(d[v] = d[u] + w, v);
			}
		}
		cin >> m;
		while(m--) {
			int val; cin >> val;
			cout << (d[val % A[1]] <= val ? "TAK" : "NIE") << endl;
		}
	}
};

class Solver {
public:
	void solve(std::istream& in, std::ostream& out) {
		sum *obj = new sum();
		obj->solve(in, out);
	}
};

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	Solver solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
