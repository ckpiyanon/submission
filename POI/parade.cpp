/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author win11905
 */

#include <bits/stdc++.h>
#define all(x) (x).begin(), (x).end()
#define long long long
#define pii pair<int, int>
#define x first
#define y second
using namespace std;
const long MOD = 1e9+7, LINF = 1e18 + 1e16;
const int INF = 1e9+1;
const double EPS = 1e-10;
const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};

const int N = 2e5+5;

class parade {
private:
    int n, mxn;
    int deg[N];
    vector<int> g[N];
    int solve_dp(int u, int p) {
        int m1 = -2, m2 = -2;
        for(int v : g[u]) if(v != p) {
            int val = solve_dp(v, u);
            if(val > m1) swap(val, m1);
            if(val > m2) swap(val, m2);
        }
        mxn = max(mxn, max(m1, 0) + max(m2, 0) + deg[u]);
        return deg[u] + max(m1, 0);
    }
public:
	void solve(istream& cin, ostream& cout) {
        cin >> n;
        fill_n(deg, N, -2);
        for(int i = 1, u, v; i < n; ++i) {
            cin >> u >> v;
            g[u].emplace_back(v), g[v].emplace_back(u);
            deg[u]++, deg[v]++;
        }
        for(int i =  1; i <= n; ++i) if(deg[i] == n-3) {
            cout << n-2 << endl;
            return;
        }
        solve_dp(1, 0);
        cout << mxn + 2 << endl;
	}
};

class Solver {
public:
	void solve(std::istream& in, std::ostream& out) {
		parade *obj = new parade();
		obj->solve(in, out);
	}
};

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	Solver solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
