/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author win11905
 * I solved by greedy, choose minimum order of all day that can sell
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>
#define long long long
#define all(x) (x).begin(), (x).end()
#define pii pair<int, int>
#define x first
#define y second
using namespace std;
const long MOD = 1e9+7, LINF = 1e18 + 1e16;
const int INF = 1e9+1;
const double EPS = 1e-10;
const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};


class hur {
private:
	int n;
	vector<int> A;
public:
	void solve(istream& cin, ostream& cout) {
		cin >> n;
		A.resize(n);
		for(int i = 0; i < n; ++i) cin >> A[i];
		priority_queue<pii> Q;
		long sum = 0;
		for(int i = 0, now; i < n; ++i) {
			cin >> now;
			sum += A[i];
			while(!Q.empty() and Q.top().x > now) sum += Q.top().x, Q.pop();
			if(now <= sum) Q.emplace(now, i), sum -= now;
		}
		vector<int> ans;
		while(!Q.empty()) ans.emplace_back(Q.top().y), Q.pop();
		sort(all(ans));
		cout << ans.size() << endl;
		for(int v : ans) cout << v+1 << ' ';
	}
};

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	hur solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
