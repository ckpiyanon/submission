/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author win11905
 */

#include <bits/stdc++.h>
#define long long long
#define vi vector<int>
#define all(x) (x).begin(), (x).end()
#define mem(x) memset(x, 0, sizeof x)
#define pii pair<int, int>
#define x first
#define y second
using namespace std;
const long LINF = 1e18 + 1e16;
const int MOD = 1e9+7;
const double EPS = 1e-10;
const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};
const int N = 1e5+5;

class TaskE {
private:
	int n, m, q;
	vector<vi> g, ccs;
	vi A, low, pre, id;
	bitset<N> art;
	bitset<N<<1> cut;
	void find_component(int u, int p) {
	    static stack<int> S;
	    static int idx = 0;
		low[u] = pre[u] = ++idx;
		S.emplace(u);
		int cnt = 0;
		for(int v : g[u]) if(!pre[v]) {
			find_component(v, u);
			low[u] = min(low[u], low[v]), cnt++;
			if(!p && cnt > 1 || p && low[v] >= pre[u]) art[u] = true;
			if(low[v] >= pre[u]) {
				ccs.emplace_back(vi());
				ccs.back().emplace_back(u);
				while(ccs.back().back() != v) ccs.back().emplace_back(S.top()), S.pop();
			}
		} else if(v != p) low[u] = min(low[u], pre[v]);
	}
	vector<vi> segT, verT;
	void gen_bctree() {
		g.clear();
		g.emplace_back(vi());
		for(int i = 1; i <= n; ++i) if(art[i]) {
			cut[id[i] =  g.size()] = true;
			g.emplace_back(vi());
		}
		for(vi &cc : ccs) {
			g.emplace_back(vi());
			for (int v : cc) {
				if (art[v]) g[id[v]].emplace_back(g.size() - 1), g.back().emplace_back(id[v]);
				else id[v] = g.size() - 1;
			}
		}
	}
	vi pos, dep, par, spi, rot;
	vi HsegT;
	int dfs_sz(int u, int p) {
		par[u] = p, dep[u] = dep[p] + 1;
		pii ret(0, -1);
		int sum = 1;
		for(int v : g[u]) if(v != p) {
			int now = dfs_sz(v, u);
			sum += now;
			if(ret.x < now) ret = pii(now, v);
		}
		spi[u] = ret.y;
		return sum;
	}
	void hld() {
		dfs_sz(1, 0);
		for(int u = 1, idx = 0; u < g.size(); ++u) if(spi[par[u]] != u)
			for(int v = u; v != -1; v = spi[v]) rot[v] = u, pos[v] = ++idx;
		segT.resize(g.size()), verT.resize(g.size());
		HsegT.resize(g.size() << 1);
		for(int i = 1; i <= n; ++i) {
			verT[id[i]].emplace_back(i);
			if(art[i] and par[id[i]]) verT[par[id[i]]].emplace_back(i);
		}
		for(int i = 1; i < g.size(); ++i) {
			sort(all(verT[i]));
			if(verT[i].empty()) segT[i] = vi(2, MOD);
			else segT[i].resize(verT[i].size() << 1);
			for(int j = 0; j < verT[i].size(); ++j) segT[i][j + verT[i].size()] = A[verT[i][j]];
			for(int j = (int)verT[i].size() - 1; j > 0; --j) segT[i][j] = min(segT[i][j<<1], segT[i][j<<1|1]);
			HsegT[g.size() + pos[i]] = segT[i][1];
		}
		for(int i = (int)g.size() - 1; i > 0; --i) HsegT[i] = min(HsegT[i<<1], HsegT[i<<1|1]);
	}
	void updT(vi &t, int x, int v, int sz) {
		for(t[x += sz] = v; x != 1; x >>= 1) {
			t[x>>1] = min(t[x], t[x^1]);
		}
	}
	int queryT(int l, int r) {
		int mn = MOD;
		for(l += g.size(), r += g.size() + 1; l < r; l >>= 1, r >>= 1) {
			if(l & 1) mn = min(mn, HsegT[l++]);
			if(r & 1) mn = min(mn, HsegT[--r]);
		}
		return mn;
	}
	int query(int a, int b) {
		int mn = MOD;
		a = id[a], b = id[b];
		while(rot[a] != rot[b]) {
			if(dep[rot[a]] < dep[rot[b]]) swap(a, b);
			mn = min(mn, queryT(pos[rot[a]], pos[a]));
			a = par[rot[a]];
		}
		auto f = [&](int v) {
			if(!cut[v] and par[v]) return queryT(pos[par[v]], pos[par[v]]);
			return MOD;
		};
		return min(min(mn, f(dep[a] < dep[b] ? a : b)), queryT(min(pos[a], pos[b]), max(pos[a], pos[b])));
	}
	int getID(vi ver, int v) {
		return lower_bound(all(ver), v) - ver.begin();
	}
public:
	void solve(istream& cin, ostream& cout) {
		cin >> n >> m >> q;
		id.resize(n+1), g.resize(n+1), A.resize(n+1), pre.resize(n+1), low.resize(n+1);
		pos.resize(n<<1), dep.resize(n<<1), par.resize(n<<1), spi.resize(n<<1), rot.resize(n<<1);
		for(int i = 1; i <= n; ++i) cin >> A[i];
		for(int i = 0, u, v; i < m; ++i) {
			cin >> u >> v;
			g[u].emplace_back(v), g[v].emplace_back(u);
		}
		find_component(1, 0);
		gen_bctree();
		hld();
		for(int i = 0, a, b; i < q; ++i) {
			char c; cin >> c >> a >> b;
			if(c == 'A') {
			    if(a == b) cout << A[a] << endl;
				else cout << query(a, b) << endl;
			} else {
				A[a] = b;
				updT(segT[id[a]], getID(verT[id[a]], a), b, verT[id[a]].size());
				updT(HsegT, pos[id[a]], segT[id[a]][1], g.size());
				if(art[a] and par[id[a]]) {
					updT(segT[par[id[a]]], getID(verT[par[id[a]]], a), b, verT[par[id[a]]].size());
					updT(HsegT, pos[par[id[a]]], segT[par[id[a]]][1], g.size());
				}
			}
		}
	}
};

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	TaskE solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}

