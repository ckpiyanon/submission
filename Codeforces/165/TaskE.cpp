/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author win11905
 */

#include <bits/stdc++.h>
#define all(x) (x).begin(), (x).end()
#define long long long
#define pii pair<int, int>
#define x first
#define y second
using namespace std;
const long MOD = 1e9+7, LINF = 1e18 + 1e16;
const int INF = 1e9+1;
const double EPS = 1e-10;
const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};

const int N = 1e6+5;

class TaskE {
private:
    int n;
    int A[N], dp[1<<22];
public:
    void solve(istream& cin, ostream& cout) {
        cin >> n;
        for(int i = 1; i <= n; ++i) cin >> A[i], dp[A[i]] = A[i];
        int flip = (1<<22) - 1;
        for(int i = 0; i < 22; ++i) for(int j = 0; j < (1<<22); ++j) {
            if(j >> i & 1) if(dp[j ^ (1 << i)]) dp[j] = dp[j ^ (1 << i)];
        }
        for(int i = 1; i <= n; ++i) cout << (dp[A[i] ^ flip] ? dp[A[i] ^ flip] : -1) << ' ';
        cout << endl;
    }
};

class Solver {
public:
    void solve(std::istream& in, std::ostream& out) {
        TaskE *obj = new TaskE();
        obj->solve(in, out);
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    Solver solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}

