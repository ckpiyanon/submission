/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author win11905
 */

#include <bits/stdc++.h>
#define long long long
#define all(x) (x).begin(), (x).end()
#define mem(x) memset(x, 0, sizeof x)
#define pii pair<int, int>
#define x first
#define y second
using namespace std;
const long LINF = 1e18 + 1e16;
const int MOD = 1e9+7;
const int N = 105;
const double EPS = 1e-10;
const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};


class kis {
private:
	int n, l, A[N], pos[N];
	long k, t[N][N];
	void update(long t[], int x, long v) {
		for(int i = x+1; i > 0; i -= i & -i) t[i-1] += v;
	}
	long query(long t[], int x, long v = 0) {
		for(int i = x+1; i <= n; i += i & -i) v += t[i-1];
		return v;
	}
	long getval(long t[], int x) { return query(t, x) - query(t, x+1); }
public:
	void solve(istream& cin, ostream& cout) {
		mem(t), mem(A);
		cin >> n >> l >> k;
		for(int i = 1; i <= n; ++i) cin >> A[i], pos[A[i]] = i;
		for(int i = n; i > 0; --i) for(int j = 0; j <= l; ++j)
			update(t[j], A[i], (j == 0) + query(t[j], A[i]) + (j ? query(t[j-1], 0) - query(t[j-1], A[i]) : 0));
		int ptr = 0, skip = 0;
		vector<int> ans;
		for(int it = 0; it < n; ++it) {
			bool have = true;
			for(int i = 0; i < n; ++i) {
				if(pos[i] <= ptr || k < 0) continue;
				long sum = 0;
				for(int j = 0; j <= l - skip - (i < A[ptr]); ++j) sum += getval(t[j], i);
				if(k - sum < 0) {
					ans.emplace_back(i), skip += (i < A[ptr]);
					ptr = pos[i], k--;
					have = false;
					break;
				} else k -= sum;
			}
			if(have) break;
		}
		if(ans.empty()) cout << "-1";
		else for(int v : ans) cout << v << ' ';
		cout << '\n';
	}
};

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	kis solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
