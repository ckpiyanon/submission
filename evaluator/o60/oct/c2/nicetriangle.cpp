/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author win11905
 */

#include <bits/stdc++.h>
#define long long long
#define all(x) (x).begin(), (x).end()
#define mem(x) memset(x, 0, sizeof x)
#define pii pair<int, int>
#define x first
#define y second
using namespace std;
const long LINF = 1e18 + 1e16;
const int MOD = 29947;
const double EPS = 1e-10;
const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};
const int N = 705;


class nicetriangle {
private:
    int x, y, z;
    int dp[N][N];
    int add(int a, int b) { return (a + b) % MOD; }
    int mul(int a, int b) { return (a * b) % MOD; }
public:
	void solve(istream& cin, ostream& cout) {
		cin >> x >> y >> z;
		x--, y--, z--;
		for(int i = 0; i < N; ++i) for(int j = 0; j < N; ++j)
			if(i == 0 or j == 0) dp[i][j] = 1;
			else dp[i][j] = add(dp[i-1][j], dp[i][j-1]);
		int ans = dp[x+y][z];
		for(int i = 1; i <= x; ++i) for(int j = 1; j <= y; ++j)
			ans = add(ans, mul(dp[i-1][j-1], dp[x+y-i-j][z]));
		cout << ans << endl;
	}
};

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	nicetriangle solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
