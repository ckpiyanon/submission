/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author szawinis
 */

#include <bits/stdc++.h>

#define long long long
#define all(x) (x).begin(), (x).end()
#define pii pair<int, int>
#define x first
#define y second
using namespace std;
const long LINF = 1e18 + 1e16;
const int MOD = 1e9 + 7;
const double EPS = 1e-10;
const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};
const int N = 1e5 + 5;


class candy {
private:
    using iii = tuple<int, int, int>;
    int n;
    int s[N], t[N];
    int par[N];
public:
    void solve(istream &cin, ostream &cout) {
        memset(par, -1, sizeof par);
        cin >> n;
        vector<iii> V;
        for (int i = 0; i < n; ++i) {
            cin >> s[i] >> t[i];
            V.emplace_back(t[i] + s[i], t[i] - s[i], i);
        }
        sort(all(V));
        multiset<pii > S;
        for (auto x : V) {
            int a, b, i;
            tie(a, b, i) = x;
            auto it = S.upper_bound(pii(b, MOD << 1));
            if (it != S.begin()) {
                it--;
                par[i] = it->y;
                S.erase(it);
            }
            S.emplace(b, i);
        }
        cout << S.size() << endl;
        int ptr = 0;
        for (auto &x : S) {
            ptr++;
            int id = x.y;
            while (id != -1) {
                cout << s[id] << ' ' << t[id] << ' ' << ptr << endl;
                id = par[id];
            }
        }
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    candy solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
